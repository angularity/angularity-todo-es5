/* globala focusElementDirective */

/**
 * <p>A directive that will focus the given element when the specified attribute changes from false to true.</p>
 * @param {function} $timeout AngularJS digest-aware setTimeout
 * @param {string} attribute The attribute that will be applied when the directive activates
 */
function focusElementDirective($timeout, attribute) {
  return {
    link: function link(scope, element, attributes) {
      var unwatch = scope.$watch(attributes[attribute], function (value) {
        if (value) {
          $timeout(function () {
            element[0].focus();
          }, 0, false);
        }
      });
      element.on('$destroy', unwatch);
    }
  }
}

/**
 * <p>Create a factory method that will produce an instance for the given <code>attribute</code> when called.</p>
 * @param {string} attribute The attribute that will be applied when the directive activates
 * @returns {Function} A factory method that creates a new instance when called
 */
focusElementDirective.forAttribute = function forAttribute(attribute) {
  return /** @ngInject */ function ($timeout) {
    return focusElementDirective($timeout, attribute);
  };
}

module.exports = focusElementDirective;